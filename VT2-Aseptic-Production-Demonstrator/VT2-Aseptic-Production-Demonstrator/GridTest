using System;

public class Node
{
    public int X, Y;
    public bool nodeWalkable;
    public Node nodeParent;
    public int gCost, hCost;
    public int fCost { get { return gCost + hCost; } }

    public Node(int x, int y, bool walkable)
    {
        X = x;
        Y = y;
        nodeWalkable = walkable;
        nodeParent = null;
        gCost = hCost = 0;
    }
}

public class Grid
{
    public int Width, Height;
    public Node[,] Nodes;

    public Grid(int width, int height)
    {
        Width = width;
        Height = height;
        Nodes = new Node[width, height];

        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {
                Nodes[x, y] = new Node(x, y, true); // Default: walkable
            }
        }
    }

    public Grid DeepCopy()
    {
        Grid copy = new Grid(this.Width, this.Height);
        for (int x = 0; x < this.Width; x++)
        {
            for (int y = 0; y < this.Height; y++)
            {
                copy.Nodes[x, y] = new Node(x, y, this.Nodes[x, y].nodeWalkable);
            }
        }
        return copy;
    }

    public void SetObstacle(int x, int y)
    {
        if (x >= 0 && x < Width && y >= 0 && y < Height)
        {
            Nodes[x, y].nodeWalkable = false;
        }
    }

    public void StaticObstacles()
    {
        for (int i = 0; i < Width; i++)
        {
            SetObstacle(i, 0);
            SetObstacle(i, Height - 1);
        }
        for (int i = 0; i < Height; i++)
        {
            SetObstacle(0, i);
            SetObstacle(Width - 1, i);
        }
    }

    int shuttleSize = 60; // Shuttle size in mm
    public void DilateObstacles()
    {
        int shuttleRadius = shuttleSize / 10; // Antal celler
        Grid gridGlobalCopy = this.DeepCopy();

        for (int i = 0; i < Width; i++)
        {
            for (int j = 0; j < Height; j++)
            {
                if (!gridGlobalCopy.Nodes[i, j].nodeWalkable)
                {
                    for (int k = -shuttleRadius; k <= shuttleRadius; k++)
                    {
                        for (int l = -shuttleRadius; l <= shuttleRadius; l++)
                        {
                            int ni = i + k;
                            int nj = j + l;
                            if (ni >= 0 && ni < Width && nj >= 0 && nj < Height)
                            {
                                Nodes[ni, nj].nodeWalkable = false;
                            }
                        }
                    }
                }
            }
        }
    }

    public void PrintGrid()
    {
        for (int i = 0; i < Width; i++)
        {
            for (int j = 0; j < Height; j++)
            {
                Console.Write(Nodes[i, j].nodeWalkable ? "0 " : "1 ");
            }
            Console.WriteLine();
        }
    }
}

class Program
{
    static void Main()
    {
        Grid gridGlobal = new Grid(72, 96); // Eksempel pÃ¥ grid med 72x96 celler
        gridGlobal.StaticObstacles();
        gridGlobal.DilateObstacles();
        gridGlobal.PrintGrid();
    }
}
