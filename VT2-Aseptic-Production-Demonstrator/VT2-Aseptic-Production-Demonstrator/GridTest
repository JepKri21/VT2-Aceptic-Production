public class Node
        {
            public int X, Y;
            public bool nodeWalkable;
            public Node nodeParent;
            public int gCost, hCost;
            public int fCost
            { get { return gCost + hCost; } }

            public Node(int x, int y, bool walkable)
            {
                X = x;
                Y = y;
                nodeWalkable = walkable;
                nodeParent = null;
                gCost = hCost = 0;
            }
        }

public class Grid
{
    public int Width, Height;
    public Node[,] Nodes;

    public Grid(int width, int height)
    {
        Width = width;
        Height = height;
        Nodes = new Node[width, height];

        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {
                Nodes[x, y] = new Node(x, y, true); // Default: walkable
            }
        }
    }

    public Grid ShallowCopy()
    {
        return (Grid)this.MemberwiseClone();
    }



    public void setObstacle(int x, int y)
    {
        if (x >= 0 && x < Width && y >= 0 && y < Height)
        {
            Nodes[x, y].nodeWalkable = false;
        }
    }

    public void shuttlePosition(int shuttleNr)
    {
        double[,] shuttlePosition = new double[shuttleNr, 2];
        for (int shuttleID = 1; shuttleID <= shuttleNr; shuttleID++)
        {
            XBotStatus pos = _xbotCommand.GetXbotStatus(shuttleID);
            double[] temPos = pos.FeedbackPositionSI;
            int positionX = (int)Math.Round(temPos[0]);
            int positionY = (int)Math.Round(temPos[1]);

            shuttlePosition[shuttleID - 1, 0] = positionX;
            shuttlePosition[shuttleID - 1, 1] = positionY;
        }
    }

    Grid gridGlobal = new Grid(720, 960); // Temporary grid size
    public void staticObstacles()
    {
        for (int i = 0; i < gridGlobal.Width; i++)
        {
            gridGlobal.setObstacle(i, 0);
            gridGlobal.setObstacle(i, gridGlobal.Height - 1);
        }
        for (int i = 0; i < gridGlobal.Height; i++)
        {
            gridGlobal.setObstacle(0, i);
            gridGlobal.setObstacle(gridGlobal.Width - 1, i);
        }
        //Husk at sætte static obstacles for hvad der kommer til at være i midten.
    }

    int shuttleSize = 60; // Shuttle size in mm
    public void dilateObstacles()
    {
        Grid gridGlobalCopy = gridGlobal.ShallowCopy();


        for (int i = 0; i < gridGlobal.Width; i++)
        {
            for (int j = 0; j < gridGlobal.Height; j++)
            {
                if (gridGlobalCopy.Nodes[i, j].nodeWalkable == false)
                {
                    for (int k = -shuttleSize; k <= shuttleSize; k++)
                    {
                        for (int l = -shuttleSize; l <= shuttleSize; l++)
                        {
                            int ni = i + k;
                            int nj = j + l;
                            if (ni >= 0 && ni < gridGlobal.Width && nj >= 0 && nj < gridGlobal.Height)
                            {
                                gridGlobal.Nodes[ni, nj].nodeWalkable = false;
                            }
                        }
                    }
                }
            }
        }
        static void PrintGrid(int[,] grid)
    {
        int rows = gridGlobal.Width;
        int cols = gridGlobal.Height;
        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                Console.Write(gridGlobal[i, j] + " ");
            }
            Console.WriteLine();
        }
    }
    }
}